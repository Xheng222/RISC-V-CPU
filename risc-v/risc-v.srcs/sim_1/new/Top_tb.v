`timescale 1ns / 1ps

module Top_tb;

    reg clk;
    reg rst;
    reg WR_Src;
    reg rs232_rxd;
    
    wire [6:0] O_led;
    wire [1:0] O_px;
    wire rs232_txd;

    Top top(
        .clk(clk),
        .rst(rst),
        .WR_Src(WR_Src),
        .rs232_rxd(rs232_rxd),
    
        // Uart
        .rs232_txd(rs232_txd),
        
        // Light
        .O_led(O_led),
        .O_px(O_px)
    );
    
    always #5 clk = ~clk;
    initial begin
        clk = 1;
        rst = 1;
        WR_Src = 1;
        rs232_rxd = 1;
        
        #100
        rst = 0;
        
        // 等待一段时间开始发送数据
        #2000;
        rst = 0;
#100; // 00

        rs232_rxd = 1'b0;  // 起始位
        #8680;  // 大约8680个时钟周期
        rs232_rxd = 1'b0;  // 数据位
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;  // 停止位
        #8680;

#868000; // 10
        // 发送一个字节的数据 "A" (ASCII 65)
        rs232_rxd = 1'b0;  // 起始位
        #8680;  // 大约8680个时钟周期
        rs232_rxd = 1'b0;  // 数据位
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;  // 停止位
        #8680;
        
#868000; // 00

        // 发送一个字节的数据 "A" (ASCII 65)
        rs232_rxd = 1'b0;  // 起始位
        #8680;  // 大约8680个时钟周期
        rs232_rxd = 1'b0;  // 数据位
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;  // 停止位
        #8680;
        
#868000; // 93

        // 发送一个字节的数据 "A" (ASCII 65)
        rs232_rxd = 1'b0;  // 起始位
        #8680;  // 大约8680个时钟周期
        rs232_rxd = 1'b1;  // 数据位
        #8680;
        rs232_rxd = 1'b1;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;
        #8680;
        rs232_rxd = 1'b1;  // 停止位
        #8680;
        
#868000; // 00

        // 发送一个字节的数据 "A" (ASCII 65)
        rs232_rxd = 1'b0;  // 起始位
        #8680;  // 大约8680个时钟周期
        rs232_rxd = 1'b0;  // 数据位
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;  // 停止位
        #8680;
        
#868000; // 00

        // 发送一个字节的数据 "A" (ASCII 65)
        rs232_rxd = 1'b0;  // 起始位
        #8680;  // 大约8680个时钟周期
        rs232_rxd = 1'b0;  // 数据位
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;  // 停止位
        #8680;
        
#868000; // 81

        // 发送一个字节的数据 "A" (ASCII 65)
        rs232_rxd = 1'b0;  // 起始位
        #8680;  // 大约8680个时钟周期
        rs232_rxd = 1'b1;  // 数据位
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;
        #8680;
        rs232_rxd = 1'b1;  // 停止位
        #8680;
        
#868000; // 03

        // 发送一个字节的数据 "A" (ASCII 65)
        rs232_rxd = 1'b0;  // 起始位
        #8680;  // 大约8680个时钟周期
        rs232_rxd = 1'b1;  // 数据位
        #8680;
        rs232_rxd = 1'b1;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;  // 停止位
        #8680;

#868000; // 40

        // 发送一个字节的数据 "A" (ASCII 65)
        rs232_rxd = 1'b0;  // 起始位
        #8680;  // 大约8680个时钟周期
        rs232_rxd = 1'b0;  // 数据位
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;  // 停止位
        #8680;

#868000; // 20

        // 发送一个字节的数据 "A" (ASCII 65)
        rs232_rxd = 1'b0;  // 起始位
        #8680;  // 大约8680个时钟周期
        rs232_rxd = 1'b0;  // 数据位
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;  // 停止位
        #8680;

#868000; // 01

        // 发送一个字节的数据 "A" (ASCII 65)
        rs232_rxd = 1'b0;  // 起始位
        #8680;  // 大约8680个时钟周期
        rs232_rxd = 1'b1;  // 数据位
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;  // 停止位
        #8680;
        
#868000; // 23

        // 发送一个字节的数据 "A" (ASCII 65)
        rs232_rxd = 1'b0;  // 起始位
        #8680;  // 大约8680个时钟周期
        rs232_rxd = 1'b1;  // 数据位
        #8680;
        rs232_rxd = 1'b1;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b0;
        #8680;
        rs232_rxd = 1'b1;  // 停止位
        #8680;
       

       // 使能接收
        #50000;  // 等待一段时间以确保数据被完全接收
        rst = 1;

        // 等待一段时间观察结果
        #50000;
        $finish;
    end


endmodule
